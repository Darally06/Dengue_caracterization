Traceback (most recent call last):
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\asyncio\base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Hp\anaconda3\envs\dengue\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
shp = gpd.read_file("Mapa\COLOMBIA.shp")
inc210 = pd.read_csv("tasa_inc_dengue210.csv")
inc220 = pd.read_csv("tasa_inc_dengue220.csv")
casos210 = pd.read_csv('casos_dengue_clasico.csv')
casos220 = pd.read_csv('casos_dengue_grave.csv')
col = pd.read_csv('Data/data_colombia.csv', encoding='latin1')

------------------


[31m---------------------------------------------------------------------------[39m
[31mDataSourceError[39m                           Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 1[39m
[32m----> [39m[32m1[39m shp = gpd.read_file([33m"[39m[33mMapa[39m[33m\[39m[33mCOLOMBIA.shp[39m[33m"[39m)
[32m      2[39m inc210 = pd.read_csv([33m"[39m[33mtasa_inc_dengue210.csv[39m[33m"[39m)
[32m      3[39m inc220 = pd.read_csv([33m"[39m[33mtasa_inc_dengue220.csv[39m[33m"[39m)

[36mFile [39m[32m~\anaconda3\envs\dengue\Lib\site-packages\geopandas\io\file.py:316[39m, in [36m_read_file[39m[34m(filename, bbox, mask, columns, rows, engine, **kwargs)[39m
[32m    313[39m             filename = response.read()
[32m    315[39m [38;5;28;01mif[39;00m engine == [33m"[39m[33mpyogrio[39m[33m"[39m:
[32m--> [39m[32m316[39m     [38;5;28;01mreturn[39;00m _read_file_pyogrio(
[32m    317[39m         filename, bbox=bbox, mask=mask, columns=columns, rows=rows, **kwargs
[32m    318[39m     )
[32m    320[39m [38;5;28;01melif[39;00m engine == [33m"[39m[33mfiona[39m[33m"[39m:
[32m    321[39m     [38;5;28;01mif[39;00m pd.api.types.is_file_like(filename):

[36mFile [39m[32m~\anaconda3\envs\dengue\Lib\site-packages\geopandas\io\file.py:576[39m, in [36m_read_file_pyogrio[39m[34m(path_or_bytes, bbox, mask, rows, **kwargs)[39m
[32m    567[39m     warnings.warn(
[32m    568[39m         [33m"[39m[33mThe [39m[33m'[39m[33minclude_fields[39m[33m'[39m[33m and [39m[33m'[39m[33mignore_fields[39m[33m'[39m[33m keywords are deprecated, and [39m[33m"[39m
[32m    569[39m         [33m"[39m[33mwill be removed in a future release. You can use the [39m[33m'[39m[33mcolumns[39m[33m'[39m[33m keyword [39m[33m"[39m
[32m   (...)[39m[32m    572[39m         stacklevel=[32m3[39m,
[32m    573[39m     )
[32m    574[39m     kwargs[[33m"[39m[33mcolumns[39m[33m"[39m] = kwargs.pop([33m"[39m[33minclude_fields[39m[33m"[39m)
[32m--> [39m[32m576[39m [38;5;28;01mreturn[39;00m pyogrio.read_dataframe(path_or_bytes, bbox=bbox, **kwargs)

[36mFile [39m[32m~\anaconda3\envs\dengue\Lib\site-packages\pyogrio\geopandas.py:275[39m, in [36mread_dataframe[39m[34m(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)[39m
[32m    270[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m use_arrow:
[32m    271[39m     [38;5;66;03m# For arrow, datetimes are read as is.[39;00m
[32m    272[39m     [38;5;66;03m# For numpy IO, datetimes are read as string values to preserve timezone info[39;00m
[32m    273[39m     [38;5;66;03m# as numpy does not directly support timezones.[39;00m
[32m    274[39m     kwargs[[33m"[39m[33mdatetime_as_string[39m[33m"[39m] = [38;5;28;01mTrue[39;00m
[32m--> [39m[32m275[39m result = read_func(
[32m    276[39m     path_or_buffer,
[32m    277[39m     layer=layer,
[32m    278[39m     encoding=encoding,
[32m    279[39m     columns=columns,
[32m    280[39m     read_geometry=read_geometry,
[32m    281[39m     force_2d=gdal_force_2d,
[32m    282[39m     skip_features=skip_features,
[32m    283[39m     max_features=max_features,
[32m    284[39m     where=where,
[32m    285[39m     bbox=bbox,
[32m    286[39m     mask=mask,
[32m    287[39m     fids=fids,
[32m    288[39m     sql=sql,
[32m    289[39m     sql_dialect=sql_dialect,
[32m    290[39m     return_fids=fid_as_index,
[32m    291[39m     **kwargs,
[32m    292[39m )
[32m    294[39m [38;5;28;01mif[39;00m use_arrow:
[32m    295[39m     [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpyarrow[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpa[39;00m

[36mFile [39m[32m~\anaconda3\envs\dengue\Lib\site-packages\pyogrio\raw.py:198[39m, in [36mread[39m[34m(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)[39m
[32m     59[39m [38;5;250m[39m[33;03m"""Read OGR data source into numpy arrays.[39;00m
[32m     60[39m 
[32m     61[39m [33;03mIMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted[39;00m
[32m   (...)[39m[32m    194[39m 
[32m    195[39m [33;03m"""[39;00m
[32m    196[39m dataset_kwargs = _preprocess_options_key_value(kwargs) [38;5;28;01mif[39;00m kwargs [38;5;28;01melse[39;00m {}
[32m--> [39m[32m198[39m [38;5;28;01mreturn[39;00m ogr_read(
[32m    199[39m     get_vsi_path_or_buffer(path_or_buffer),
[32m    200[39m     layer=layer,
[32m    201[39m     encoding=encoding,
[32m    202[39m     columns=columns,
[32m    203[39m     read_geometry=read_geometry,
[32m    204[39m     force_2d=force_2d,
[32m    205[39m     skip_features=skip_features,
[32m    206[39m     max_features=max_features [38;5;129;01mor[39;00m [32m0[39m,
[32m    207[39m     where=where,
[32m    208[39m     bbox=bbox,
[32m    209[39m     mask=_mask_to_wkb(mask),
[32m    210[39m     fids=fids,
[32m    211[39m     sql=sql,
[32m    212[39m     sql_dialect=sql_dialect,
[32m    213[39m     return_fids=return_fids,
[32m    214[39m     dataset_kwargs=dataset_kwargs,
[32m    215[39m     datetime_as_string=datetime_as_string,
[32m    216[39m )

[36mFile [39m[32mpyogrio/_io.pyx:1313[39m, in [36mpyogrio._io.ogr_read[39m[34m()[39m

[36mFile [39m[32mpyogrio/_io.pyx:232[39m, in [36mpyogrio._io.ogr_open[39m[34m()[39m

[31mDataSourceError[39m: Mapa\COLOMBIA.shp: No such file or directory

